java.nio中拥有的3个核心概念：Selector,Channel与Buffer。在java.nio中，我们是面向块（block）或是缓冲区（buffer）编程的。
Buffer本身就是一块内存，底层实现上，它实际上是个数组。数据的读、写都是通过Buffer来实现的。

除了数组之外，Buffer还提供了对于数据的结构化访问方式，并且可以追踪到系统的读写过程。

java中的7中原生数据类型都有各自对应的Buffer类型，如：IntBuffer，CharBuffer，LongBuffer等等，并没有BooleanBuffer类型。

Channel指的是可以向其写入数据或者从中读取数据的对象，它类似于java.io中的Stream。

所有数据的读写都是通过Buffer来进行的，永远不会出现直接向Channel写入数据的情况，或者是直接从Channel读取数据的情况。

与Stream不同的是，Channel是双向的，一个流只可能是InputStream或是OutputStream，Channel打开后则可以进行读取、写入或是读写

由于Channel是双向的，因此它能更好地反映出底层操作系统的真实情况；在linux系统中，底层的操作系统的通道是双向的。

通过NIO读取文件涉及到的3个步骤：

1.从FileInputStream获取到FileChannel对象。
2.创建Buffer。
3.将数据从Channel读取到Buffer中。

绝对方法与相对方法的含义：

1.相对方法：limit值与position值会在操作时被考虑到。
2.绝对方法：完全忽略掉limit值与position值。（直接通过索引进行操作）